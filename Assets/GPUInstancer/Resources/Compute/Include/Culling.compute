#ifndef __culling_hlsl_
#define __culling_hlsl_

#include "Params.compute"

inline bool IsCulled(in float4x4 objectTransformMatrix)
{
    bool isCulled = false;

    // Calculate clip space matrix
    float4x4 to_clip_space_mat = mul(mvpMatrix, objectTransformMatrix);
    
    float3 Min = boundsCenter - boundsExtents;
    float3 Max = boundsCenter + boundsExtents;

	// Transform all 8 corner points of the object bounding box to clip space
    float4 BoundingBox[8];
    BoundingBox[0] = mul(to_clip_space_mat, float4(Min.x, Max.y, Min.z, 1.0));
    BoundingBox[1] = mul(to_clip_space_mat, float4(Min.x, Max.y, Max.z, 1.0));
    BoundingBox[2] = mul(to_clip_space_mat, float4(Max.x, Max.y, Max.z, 1.0));
    BoundingBox[3] = mul(to_clip_space_mat, float4(Max.x, Max.y, Min.z, 1.0));
    BoundingBox[4] = mul(to_clip_space_mat, float4(Max.x, Min.y, Min.z, 1.0));
    BoundingBox[5] = mul(to_clip_space_mat, float4(Max.x, Min.y, Max.z, 1.0));
    BoundingBox[6] = mul(to_clip_space_mat, float4(Min.x, Min.y, Max.z, 1.0));
    BoundingBox[7] = mul(to_clip_space_mat, float4(Min.x, Min.y, Min.z, 1.0));

    // OBB Frustum Culling
    if (isFrustumCulling)
    {
        // Test all 8 points with both positive and negative planes
        for (int i = 0; i < 3; i++)
        {
            // cull if outside positive plane:
            isCulled = isCulled ||
			(BoundingBox[0][i] > BoundingBox[0].w + frustumOffset &&
			BoundingBox[1][i] > BoundingBox[1].w + frustumOffset &&
			BoundingBox[2][i] > BoundingBox[2].w + frustumOffset &&
			BoundingBox[3][i] > BoundingBox[3].w + frustumOffset &&
			BoundingBox[4][i] > BoundingBox[4].w + frustumOffset &&
			BoundingBox[5][i] > BoundingBox[5].w + frustumOffset &&
			BoundingBox[6][i] > BoundingBox[6].w + frustumOffset &&
			BoundingBox[7][i] > BoundingBox[7].w + frustumOffset);

            // cull if outside negative plane:
            isCulled = isCulled ||
			(BoundingBox[0][i] < -BoundingBox[0].w - frustumOffset &&
			BoundingBox[1][i] < -BoundingBox[1].w - frustumOffset &&
			BoundingBox[2][i] < -BoundingBox[2].w - frustumOffset &&
			BoundingBox[3][i] < -BoundingBox[3].w - frustumOffset &&
			BoundingBox[4][i] < -BoundingBox[4].w - frustumOffset &&
			BoundingBox[5][i] < -BoundingBox[5].w - frustumOffset &&
			BoundingBox[6][i] < -BoundingBox[6].w - frustumOffset &&
			BoundingBox[7][i] < -BoundingBox[7].w - frustumOffset);
        }
    }
    
    // Hierarchical Z-Buffer Occlusion Culling      
    if (!isCulled && isOcclusionCulling)
    {
        // NOTE: for Direct3D, the clipping space z coordinate ranges from 0 to w and for OpenGL, it ranges from -w to w.
        // Also, Depth value is reversed in between. Thus the depth calculations differ for each, but the difference is taken care of in the blit shader.
        
        for (int i = 0; i < 8; i++)
            BoundingBox[i].xyz /= BoundingBox[i].w;

        float2 BoundingRect[2];

        BoundingRect[0].x = min(min(min(BoundingBox[0].x, BoundingBox[1].x),
								    min(BoundingBox[2].x, BoundingBox[3].x)),
							    min(min(BoundingBox[4].x, BoundingBox[5].x),
								    min(BoundingBox[6].x, BoundingBox[7].x))) / 2.0 + 0.5;
        BoundingRect[0].y = min(min(min(BoundingBox[0].y, BoundingBox[1].y),
								    min(BoundingBox[2].y, BoundingBox[3].y)),
						        min(min(BoundingBox[4].y, BoundingBox[5].y),
								    min(BoundingBox[6].y, BoundingBox[7].y))) / 2.0 + 0.5;
        BoundingRect[1].x = max(max(max(BoundingBox[0].x, BoundingBox[1].x),
								    max(BoundingBox[2].x, BoundingBox[3].x)),
							    max(max(BoundingBox[4].x, BoundingBox[5].x),
								    max(BoundingBox[6].x, BoundingBox[7].x))) / 2.0 + 0.5;
        BoundingRect[1].y = max(max(max(BoundingBox[0].y, BoundingBox[1].y),
								    max(BoundingBox[2].y, BoundingBox[3].y)),
							    max(max(BoundingBox[4].y, BoundingBox[5].y),
                                    max(BoundingBox[6].y, BoundingBox[7].y))) / 2.0 + 0.5;

        float InstanceDepth = min(min(min(BoundingBox[0].z, BoundingBox[1].z),
									min(BoundingBox[2].z, BoundingBox[3].z)),
							   min(min(BoundingBox[4].z, BoundingBox[5].z),
									min(BoundingBox[6].z, BoundingBox[7].z)));
        
	    // Fetch the depth texture and sample it with the bounds
        float4 Samples;
        Samples.x = 1 - hiZMap.SampleLevel(sampler_hiZMap, float2(BoundingRect[0].x, BoundingRect[0].y), 0).r;
        Samples.y = 1 - hiZMap.SampleLevel(sampler_hiZMap, float2(BoundingRect[0].x, BoundingRect[1].y), 0).r;
        Samples.z = 1 - hiZMap.SampleLevel(sampler_hiZMap, float2(BoundingRect[1].x, BoundingRect[1].y), 0).r;
        Samples.w = 1 - hiZMap.SampleLevel(sampler_hiZMap, float2(BoundingRect[1].x, BoundingRect[0].y), 0).r;
        float middleSample = 1 - hiZMap.SampleLevel(sampler_hiZMap, float2(((BoundingRect[1].x - BoundingRect[0].x) / 2.0) + BoundingRect[0].x, ((BoundingRect[1].y - BoundingRect[0].y) / 2.0) + BoundingRect[0].y), 0).r;
        float MaxDepth = max(max(max(Samples.x, Samples.y), max(Samples.z, Samples.w)), middleSample);

        isCulled = InstanceDepth > MaxDepth;
    }

    return isCulled;
}

#endif
